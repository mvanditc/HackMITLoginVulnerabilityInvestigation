## Common School Email Naming Convention:
# 8 Chacters
# First character of first name
# Remaining characters filled with character from last name, adding a number 
#  if duplicate names exist

#Clear txt file contents, for fresh start
open('wordlist\\usernames.txt', 'w').close()

lastNamesFile = open('wordlist\\lastNames.txt', 'r')
lastNamesList = lastNamesFile.readlines()
lastNamesFile.close()

firstNameInitial = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]

simpleUserNames = []
finalUserNames = []

# Signifies the start of the generation
print("start---------------------------------------------------------------")

# AddSimpleUserNames is used to generate a list of possible usernames without 
#  numbers
def AddSimpleUserNames():
    for lastName in lastNamesList:
        for letter in firstNameInitial:
            lastName = lastName.strip()
            newName = letter + lastName[:7].lower()
            simpleUserNames.append(newName)
    return

# AddNumbersToUserNames is used to add trailing numbers to username, with the
#  limit of numbers being 3 digits.
# Even though numbers are being added, the function ensures that the username
#  stays 8 or less characters long.
def AddNumbersToUserNames():
    for name in simpleUserNames:
        # We will be adding 0-400 on the end of each username, as it is unlikely
        #  there will be more than 400 people with the same exact name.
        for i in range(1, 400):
            if(i < 9):
              newName = name[:7] + str(i)
            elif(i < 99):
              newName = name[:6] + str(i)
            else:
              newName = name[:5] + str(i)
            finalUserNames.append(newName)
    return

AddSimpleUserNames()
AddNumbersToUserNames()

#Using the stock numbers and files, around 5,000,000 possible usernames will be
# generated into the usernames.txt file
with open('wordlist\\usernames.txt', 'w') as f:
    for name in finalUserNames:
        f.write(name + "\n")

# Signifies the end of the generation
print("end---------------------------------------------------------------")